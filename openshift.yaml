apiVersion: v1
kind: Template
labels:
  app: ansiwatch-bot
  template: ansiwatch-bot
message: >
  The following service(s) have been created in your project: ${NAME}.
metadata:
  annotations:
    description: A bot (GitHub App) for doing deployment
    iconClass: icon-python
    openshift.io/display-name: Ansible linter bot integration
    openshift.io/documentation-url: >
      https://github.com/webknjaz/ansiwatch-bot
    openshift.io/long-description: >
      This template defines resources needed to develop a GitHub Bot
      application, including a build configuration and application
      deployment configuration.  It does not include a database.
    openshift.io/provider-display-name: >
      @webknjaz
    openshift.io/support-url: >
      https://github.com/webknjaz/ansiwatch-bot/issues
    tags: python,bot,cherrypy,github
    template.openshift.io/bindable: 'false'
  name: ansiwatch-bot
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    secret-key: ${DJANGO_SECRET_KEY}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit:
      script: true || ./manage.py test
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: PIP_INDEX_URL
          value: ${PIP_INDEX_URL}
        from:
          kind: ImageStreamTag
          name: python:${PYTHON_VERSION}
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels: 
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - env:
          - name: GITHUB_APP_ID
            value: ${GITHUB_APP_ID}
          - name: GITHUB_INSTALL_ID
            value: ${GITHUB_INSTALL_ID}
          - name: GITHUB_PRIVATE_KEY
            value: ${GITHUB_PRIVATE_KEY}
          - name: GITHUB_OAUTH_CLIENT_ID
            value: ${GITHUB_OAUTH_CLIENT_ID}
          - name: GITHUB_OAUTH_CLIENT_SECRET
            value: ${GITHUB_OAUTH_CLIENT_SECRET}
          - name: APP_CONFIG
            value: ${APP_CONFIG}
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret-key
                name: '${NAME}'
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: ansiwatch-bot
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ansiwatch-bot
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: ansiwatch-bot
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: >
    Version of Python image to be used (3.4, 3.5, 3.6, 3.7 or latest).
  displayName: Version of Python Image
  name: PYTHON_VERSION
  required: true
  # value: '3.7'
  value: '3.6'
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: >
    The URL of the repository with your application source code
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/webknjaz/ansiwatch-bot.git
- description: >
    Set this to a branch name, tag or other ref of your repository if
    you are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: >
    Set this to the relative path to your project if it is not in the
    root of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: >
    The exposed hostname that will route to the Django service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- description: >
    Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: Relative path to Gunicorn configuration file (optional).
  displayName: Application Configuration File Path
  name: APP_CONFIG
- description: Set this to a long random string.
  displayName: Django Secret Key
  from: '[\w]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY
- description: The custom PyPi index URL
  displayName: Custom PyPi Index URL
  name: PIP_INDEX_URL
  value: ''

